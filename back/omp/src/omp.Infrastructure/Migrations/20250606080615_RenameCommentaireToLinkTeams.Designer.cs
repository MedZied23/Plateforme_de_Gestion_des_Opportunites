// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using omp.Infrastructure.Persistence;

#nullable disable

namespace omp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250606080615_RenameCommentaireToLinkTeams")]
    partial class RenameCommentaireToLinkTeams
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("omp.Domain.Entites.BailleurDeFond", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Modele")
                        .HasColumnType("integer");

                    b.Property<string>("NomBailleur")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BailleursDeFonds");
                });

            modelBuilder.Entity("omp.Domain.Entites.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<string>("ContactNom")
                        .HasColumnType("text");

                    b.Property<string>("NomClient")
                        .HasColumnType("text");

                    b.Property<string>("Pays")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("omp.Domain.Entites.Cv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Certifications")
                        .HasColumnType("text");

                    b.Property<string>("Experiences")
                        .HasColumnType("text");

                    b.Property<string>("Formations")
                        .HasColumnType("text");

                    b.Property<Guid?>("Id_user")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguesPratiquees")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Presentation")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Projets")
                        .HasColumnType("text");

                    b.Property<string>("documentUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id_user")
                        .IsUnique();

                    b.ToTable("Cvs");
                });

            modelBuilder.Entity("omp.Domain.Entites.CvAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CvId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Element")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeOperation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CvAuditLogs");
                });

            modelBuilder.Entity("omp.Domain.Entites.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CvId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Employer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Poste")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("omp.Domain.Entites.Formation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CvId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Diplome")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Institution")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("omp.Domain.Entites.Livrable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<int?>("EndWeek")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdPhase")
                        .HasColumnType("uuid");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Pourcentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("StartWeek")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalParLivrable")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdPhase");

                    b.ToTable("Livrables");
                });

            modelBuilder.Entity("omp.Domain.Entites.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OpportuniteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PropositionFinanciereId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("RecipientIds")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DateSent");

                    b.HasIndex("OpportuniteId");

                    b.HasIndex("PropositionFinanciereId");

                    b.HasIndex("Read");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("omp.Domain.Entites.Opportunite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssocieEnCharge")
                        .HasColumnType("uuid");

                    b.Property<bool?>("BailleurExists")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoManagerEnCharge")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("Duree")
                        .HasColumnType("integer");

                    b.Property<string>("EquipeProjet")
                        .HasColumnType("text");

                    b.Property<string>("IdBailleurDeFonds")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdPropositionFinanciere")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LinkTeams1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("LinkTeams2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ManagerEnCharge")
                        .HasColumnType("uuid");

                    b.Property<string>("Monnaie")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nature")
                        .HasColumnType("text");

                    b.Property<string>("NomOpportunite")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Offre")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PartenaireId")
                        .HasColumnType("text");

                    b.Property<bool?>("PartnerExists")
                        .HasColumnType("boolean");

                    b.Property<string>("Pays")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("SeniorManagerEnCharge")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("IdPropositionFinanciere")
                        .IsUnique();

                    b.ToTable("Opportunites", t =>
                        {
                            t.HasCheckConstraint("CK_Opportunite_Duree", "\"Duree\" IS NULL OR \"Duree\" >= 0");

                            t.HasCheckConstraint("CK_Opportunite_PartnerExists", "\"PartnerExists\" IS NULL OR \"PartnerExists\" = false OR (\"PartnerExists\" = true AND \"PartenaireId\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("omp.Domain.Entites.OpportuniteTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Done")
                        .HasColumnType("boolean");

                    b.Property<string>("Equipe")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Nature")
                        .HasColumnType("integer");

                    b.Property<string>("NewName")
                        .HasColumnType("text");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OpportuniteId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Percentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Statut")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpportuniteId");

                    b.ToTable("OpportuniteTasks", t =>
                        {
                            t.HasCheckConstraint("CK_OpportuniteTask_Numero", "\"Numero\" IS NULL OR \"Numero\" >= 1");

                            t.HasCheckConstraint("CK_OpportuniteTask_Percentage", "\"Percentage\" IS NULL OR (\"Percentage\" >= 0 AND \"Percentage\" <= 100)");
                        });
                });

            modelBuilder.Entity("omp.Domain.Entites.Partenaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactCle")
                        .HasColumnType("text");

                    b.Property<string>("Domaine")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Partenaires");
                });

            modelBuilder.Entity("omp.Domain.Entites.Phase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdPropositionFinanciere")
                        .HasColumnType("uuid");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Pourcentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("TotalParPhase")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("omp.Domain.Entites.Profil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdPartenaire")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdPropositionFinanciere")
                        .HasColumnType("uuid");

                    b.Property<string>("NomPrenom")
                        .HasColumnType("text");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("Poste")
                        .HasColumnType("text");

                    b.Property<int?>("TJM")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalCostParProfil")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalDepense")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalParProfil")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalSiege")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalSiegeParJour")
                        .HasColumnType("numeric");

                    b.Property<int?>("TotalTerrain")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalTerrainParJour")
                        .HasColumnType("numeric");

                    b.Property<string>("UnitsDepense")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdPartenaire");

                    b.HasIndex("IdPropositionFinanciere");

                    b.ToTable("Profils");
                });

            modelBuilder.Entity("omp.Domain.Entites.Projet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<Guid?>("CvId")
                        .HasColumnType("uuid");

                    b.Property<string>("Domaine")
                        .HasColumnType("text");

                    b.Property<bool>("Hide")
                        .HasColumnType("boolean");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("Perimetre")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("omp.Domain.Entites.PropositionFinanciere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AverageTJM")
                        .HasColumnType("numeric");

                    b.Property<int?>("BudgetPartEY")
                        .HasColumnType("integer");

                    b.Property<string>("BudgetsPartenaires")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkTeams")
                        .HasColumnType("text");

                    b.Property<string>("MatricePL")
                        .HasColumnType("text");

                    b.Property<string>("MatricePLSiege")
                        .HasColumnType("text");

                    b.Property<string>("MatricePLSiegeParJour")
                        .HasColumnType("text");

                    b.Property<string>("MatricePLTerrain")
                        .HasColumnType("text");

                    b.Property<string>("MatricePLTerrainParJour")
                        .HasColumnType("text");

                    b.Property<int?>("NbrHJPartEY")
                        .HasColumnType("integer");

                    b.Property<string>("NbrHJPartenaires")
                        .HasColumnType("text");

                    b.Property<decimal?>("NbrJoursParMois")
                        .HasColumnType("numeric");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<decimal?>("PourcentBudgetEY")
                        .HasColumnType("numeric");

                    b.Property<string>("PourcentBudgetPartenaires")
                        .HasColumnType("text");

                    b.Property<decimal?>("PourcentHjEY")
                        .HasColumnType("numeric");

                    b.Property<string>("PourcentHjPartenaires")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SumHJ")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalCost")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalExpenses")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalProjet")
                        .HasColumnType("integer");

                    b.Property<int?>("nbrSemaines")
                        .HasColumnType("integer");

                    b.Property<string>("prixDepenses")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PropositionsFinancieres");
                });

            modelBuilder.Entity("omp.Domain.Entites.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("Budget")
                        .HasColumnType("bigint");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("text");

                    b.Property<string>("Equipe")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Offre")
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("References");
                });

            modelBuilder.Entity("omp.Domain.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("omp.Domain.Entites.Cv", b =>
                {
                    b.HasOne("omp.Domain.Entites.User", null)
                        .WithOne()
                        .HasForeignKey("omp.Domain.Entites.Cv", "Id_user")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("omp.Domain.Entites.CvAuditLog", b =>
                {
                    b.HasOne("omp.Domain.Entites.Cv", null)
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("omp.Domain.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("omp.Domain.Entites.Experience", b =>
                {
                    b.HasOne("omp.Domain.Entites.Cv", null)
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("omp.Domain.Entites.Formation", b =>
                {
                    b.HasOne("omp.Domain.Entites.Cv", null)
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("omp.Domain.Entites.Livrable", b =>
                {
                    b.HasOne("omp.Domain.Entites.Phase", null)
                        .WithMany()
                        .HasForeignKey("IdPhase")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("omp.Domain.Entites.Opportunite", b =>
                {
                    b.HasOne("omp.Domain.Entites.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("omp.Domain.Entites.PropositionFinanciere", null)
                        .WithOne()
                        .HasForeignKey("omp.Domain.Entites.Opportunite", "IdPropositionFinanciere")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("omp.Domain.Entites.OpportuniteTask", b =>
                {
                    b.HasOne("omp.Domain.Entites.Opportunite", null)
                        .WithMany()
                        .HasForeignKey("OpportuniteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("omp.Domain.Entites.Profil", b =>
                {
                    b.HasOne("omp.Domain.Entites.Partenaire", null)
                        .WithMany()
                        .HasForeignKey("IdPartenaire")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("omp.Domain.Entites.PropositionFinanciere", null)
                        .WithMany()
                        .HasForeignKey("IdPropositionFinanciere")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("omp.Domain.Entites.Projet", b =>
                {
                    b.HasOne("omp.Domain.Entites.Cv", null)
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("omp.Domain.Entites.Reference", null)
                        .WithMany()
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
